// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.proyecto.inicial.domain;

import com.proyecto.inicial.domain.Persona;
import com.proyecto.inicial.domain.PersonaDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect PersonaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersonaDataOnDemand: @Component;
    
    private Random PersonaDataOnDemand.rnd = new SecureRandom();
    
    private List<Persona> PersonaDataOnDemand.data;
    
    public Persona PersonaDataOnDemand.getNewTransientPersona(int index) {
        Persona obj = new Persona();
        setApellido(obj, index);
        setContrasena(obj, index);
        setDni(obj, index);
        setEnable(obj, index);
        setNombre(obj, index);
        setTelefono(obj, index);
        setUsuario(obj, index);
        return obj;
    }
    
    public void PersonaDataOnDemand.setApellido(Persona obj, int index) {
        String apellido = "apellido_" + index;
        obj.setApellido(apellido);
    }
    
    public void PersonaDataOnDemand.setContrasena(Persona obj, int index) {
        String contrasena = "contrasena_" + index;
        if (contrasena.length() > 15) {
            contrasena = contrasena.substring(0, 15);
        }
        obj.setContrasena(contrasena);
    }
    
    public void PersonaDataOnDemand.setDni(Persona obj, int index) {
        Long dni = new Integer(index).longValue();
        obj.setDni(dni);
    }
    
    public void PersonaDataOnDemand.setEnable(Persona obj, int index) {
        Boolean enable = true;
        obj.setEnable(enable);
    }
    
    public void PersonaDataOnDemand.setNombre(Persona obj, int index) {
        String nombre = "nombre_" + index;
        obj.setNombre(nombre);
    }
    
    public void PersonaDataOnDemand.setTelefono(Persona obj, int index) {
        Long telefono = new Integer(index).longValue();
        obj.setTelefono(telefono);
    }
    
    public void PersonaDataOnDemand.setUsuario(Persona obj, int index) {
        String usuario = "usuario_" + index;
        obj.setUsuario(usuario);
    }
    
    public Persona PersonaDataOnDemand.getSpecificPersona(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Persona obj = data.get(index);
        Long id = obj.getId();
        return Persona.findPersona(id);
    }
    
    public Persona PersonaDataOnDemand.getRandomPersona() {
        init();
        Persona obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Persona.findPersona(id);
    }
    
    public boolean PersonaDataOnDemand.modifyPersona(Persona obj) {
        return false;
    }
    
    public void PersonaDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Persona.findPersonaEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Persona' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Persona>();
        for (int i = 0; i < 10; i++) {
            Persona obj = getNewTransientPersona(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
